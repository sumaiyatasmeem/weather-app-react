{"version":3,"sources":["Component/date.js","App.js","serviceWorker.js","index.js"],"names":["DateCalc","className","date","month","getMonth","day","getDay","todaysDate","getDate","year","getFullYear","dates","Date","API","App","useState","query","setQuery","weather","setWeather","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","r","json","result","console","log","main","name","sys","country","Math","round","temp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qJAoBeA,MAnBf,WAWM,OACI,yBAAKC,UAAU,0BAXT,SAACC,GACT,IAGIC,EAHS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAG1GD,EAAKE,YACnBC,EAHO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAGjEH,EAAKI,UACdC,EAAaL,EAAKM,UAClBC,EAAMP,EAAKQ,cACf,MAAM,GAAN,OAAUL,EAAV,aAAkBE,EAAlB,YAAgCJ,EAAhC,YAAyCM,GAItCE,CAAM,IAAIC,QCVfC,G,KACC,oCADDA,EAEE,2CAkDOC,MAhDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAgBb,OACE,6BACA,8BAEA,yBAAKlB,UAAU,qCACf,2BAAOmB,KAAK,OACZnB,UAAU,MACVoB,YAAY,SACZC,SAAU,SAAAC,GAAC,OAAEN,EAASM,EAAEC,OAAOC,QAC/BA,MAAOT,EACPU,WAtBe,SAAAH,GACC,UAAVA,EAAEI,KACJC,MAAM,GAAD,OAAIf,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDgB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACJb,EAAWa,GACXf,EAAS,IACTgB,QAAQC,IAAIF,UAiBK,oBAAhBd,EAAQiB,KACjB,6BAEA,yBAAKlC,UAAU,mCAAmCiB,EAAQkB,KAA1D,IAAiElB,EAAQmB,IAAIC,SAG7E,kBAAC,EAAD,MAGA,6BACA,yBAAKrC,UAAU,wCAAwCsC,KAAKC,MAAMtB,EAAQiB,KAAKM,MAA/E,SACA,yBAAKxC,UAAU,6BAA6BiB,EAAQA,QAAQ,GAAGiB,QAG1D,M,MCtCWO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.c14457fc.chunk.js","sourcesContent":["import React from 'react';\r\nfunction DateCalc(){\r\n    const dates=(date)=>{\r\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        \r\n        let month= months[date.getMonth()];\r\n        let day=days[date.getDay()];\r\n        let todaysDate = date.getDate();\r\n        let year= date.getFullYear(); \r\n        return `${day}, ${todaysDate} ${month} ${year}`\r\n      }\r\n      return(\r\n          <div className=\"text-center text-white\">\r\n          {dates(new Date())}\r\n          </div>\r\n      )\r\n\r\n      \r\n}\r\nexport default DateCalc","import React, {useState} from 'react';\nimport DateCalc from './Component/date';\nimport './App.css';\n\nconst API={\n  key: \"8e89bfccc6a7f0e2f0c9dacddccc93dc\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  \n    const search = e => {\n      if (e.key === \"Enter\") {\n        fetch(`${API.base}weather?q=${query}&units=metric&APPID=${API.key}`)\n          .then(r => r.json())\n          .then(result => {\n            setWeather(result);\n            setQuery('');\n            console.log(result);\n          });\n      }\n    }\n  \n  return (\n    <div>\n    <main>\n    {/*Search*/}\n    <div className=\"m-5 d-flex justify-content-center\">\n    <input type=\"text\"\n    className=\"p-1\"\n    placeholder=\"Search\"\n    onChange={e=>setQuery(e.target.value)}\n    value={query}\n    onKeyPress={search}></input>\n    </div>\n    {(typeof weather.main != \"undefined\") ? (\n    <div>\n     {/*Location*/}\n    <div className=\"location text-center text-white\">{weather.name},{weather.sys.country}</div>\n\n    {/*Current Date*/}\n    <DateCalc/>\n\n     {/*Weather*/}\n    <div>\n    <div className=\"display-4 m-5 text-center text-white\">{Math.round(weather.main.temp)}Â°c</div>\n    <div className=\"h4 text-center text-white\">{weather.weather[0].main}</div>\n    </div>\n    </div>\n    ) : ('')}\n    </main>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}